version: '3.7'

services:
  redis:
    image: redis:6-alpine
    command: redis-server --appendonly yes
    healthcheck:
      test: redis-cli ping
    restart: unless-stopped
    volumes:
      - ./redis/data:/data
    logging: &logging
      driver: journald
      options:
        tag: {% raw %}'{{.Name}}'{% endraw %}

  db:
    image: postgres:14.0-alpine
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} || exit 1
    restart: unless-stopped
    env_file: ./.env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./db/data:/var/lib/postgresql/data
    logging:
      <<: *logging

  app:
    build:
      context: .
      dockerfile: app/Dockerfile
    image: {{cookiecutter.django_project_name}}/app
    healthcheck:
      test: ["CMD", "./healthcheck.py", "/var/run/gunicorn/gunicorn.sock"]
    init: true
    restart: unless-stopped
    env_file: ./.env
    {% if cookiecutter.monitoring == 'y' -%}
    environment:
      # Add this variable to all containers that should dump Prometheus metrics.  Each container besides this one
      # should use a different subdirectory of /prometheus-multiproc-dir, e.g.
      # - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir/other-container
      # Don't forget to also mount the prometheus-metrics volume in other containers too.
      - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir
    {%- endif %}
    volumes:
      - backend-static:/root/src/static
      - gunicorn-socket:/var/run/gunicorn
      - ./media:/root/src/media
      {% if cookiecutter.monitoring == 'y' -%}
      # Add this mount to each container that should dump Prometheus metrics.
      - ./prometheus-metrics:/prometheus-multiproc-dir
      {%- endif %}
    depends_on:
      - redis
      - db
    logging:
      <<: *logging

  {% if cookiecutter.use_celery == "y" -%}
  celery-worker:
    image: {{cookiecutter.django_project_name}}/app
    init: true
    healthcheck:
      test: celery -A {{cookiecutter.django_project_name}} status > /dev/null || exit 1
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
      {% if cookiecutter.monitoring == 'y' -%}
      - PROMETHEUS_MULTIPROC_DIR=/prometheus-multiproc-dir/celery-worker
      {%- endif %}
    command: ./celery-entrypoint.sh
    {% if cookiecutter.monitoring == 'y' -%}
    volumes:
      - ./prometheus-metrics:/prometheus-multiproc-dir
    {%- endif %}
    tmpfs: /run
    depends_on:
      - redis
    logging:
      <<: *logging

  celery-beat:
    image: {{cookiecutter.django_project_name}}/app
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
    command: nice celery -A {{cookiecutter.django_project_name}} beat -l INFO --schedule /tmp/celerybeat-schedule -f /tmp/logs/celery-beat.log
    volumes:
      - ./logs:/tmp/logs
    depends_on:
      - redis
    logging:
      <<: *logging

  {% if cookiecutter.use_flower == "y" -%}
  celery-flower:
    image: {{cookiecutter.django_project_name}}/app
    healthcheck:
      test: wget --user "${CELERY_FLOWER_USER}" --password "${CELERY_FLOWER_PASSWORD}" -qO- 127.0.0.1:5555 > /dev/null || exit 1
    init: true
    restart: unless-stopped
    env_file: ./.env
    environment:
      - DEBUG=off
    command: celery --app={{cookiecutter.django_project_name}} --broker="${CELERY_BROKER_URL}" flower --basic_auth="${CELERY_FLOWER_USER}:${CELERY_FLOWER_PASSWORD}"
    depends_on:
      - celery-worker
    ports:
      - 5555:5555
    logging:
      <<: *logging
  {% endif %}
  {% endif -%}

  nginx:
    image: 'ghcr.io/reef-technologies/nginx-rt:v1.2.2'
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl 0.0.0.0:80/admin/login/ -s --fail -H \"Host: $NGINX_HOST\" -H \"User-Agent: docker-compose-healthcheck\" -o /dev/null || exit 1"
      ]
      interval: 30s
      retries: 5
      start_period: 20s
      timeout: 10s
    environment:
      - NGINX_HOST=${NGINX_HOST}
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/config_helpers:/etc/nginx/config_helpers
      - backend-static:/srv/static:ro
      - ./media:/srv/media:ro
      - ./letsencrypt/etc:/etc/letsencrypt
      - ./nginx/monitoring_certs:/etc/monitoring_certs
      - gunicorn-socket:/var/run/gunicorn:ro
    depends_on:
      - app
      {% if cookiecutter.monitoring == 'y' %}
      - cadvisor
      - node-exporter
      {% endif %}
    command: nginx -g 'daemon off;'
    ports:
      - 80:80
      - 443:443
      {% if cookiecutter.monitoring == 'y' %}
      - 10443:10443
      {% endif %}
    logging:
      <<: *logging
    {% if cookiecutter.monitoring == 'y' %}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    {% endif %}

  {% if cookiecutter.monitoring == 'y' %}
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    network_mode: host
    pid: host
    volumes:
      - /:/host:ro,rslave
      - nodeexporter_collectors:/textfile_collectors
      
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|run|boot|var/.+)($$|/)'
      {% if cookiecutter.vulnerabilities_scanning == 'y' %}
      - '--collector.textfile.directory=textfile_collectors'
      {% endif %}
      {% if cookiecutter.monitor_tcpstat == 'y' %}
      - '--collector.tcpstat'
      {% endif %}
    logging:
      <<: *logging

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.40.0
    container_name: cadvisor
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    restart: unless-stopped
    logging:
      <<: *logging
  {% endif %}

  {% if cookiecutter.log_aggregating == 'y' %}
  promtail:
    image: grafana/promtail:2.9.2
    restart: unless-stopped
    environment:
      - LOKI_URL=${LOKI_URL}
      - LOKI_REFRESH_INTERVAL=${LOKI_REFRESH_INTERVAL}
      - LOKI_USER=${LOKI_USER}
      - LOKI_PASSWORD=${LOKI_PASSWORD}
      - LOKI_CLIENT=${LOKI_CLIENT}
      - LOKI_CLIENT_SERVER_GROUP=${LOKI_CLIENT_SERVER_GROUP}
    volumes:
      - ./promtail:/etc/promtail
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - -config.file=/etc/promtail/config.yml
      - -config.expand-env=true
    logging:
      <<: *logging
  {% endif %}
  {% if cookiecutter.vulnerabilities_scanning == 'y' %}
  vulnrelay:
    image: 'ghcr.io/reef-technologies/vulnrelay:latest'
    container_name: vulnrelay
    restart: unless-stopped
    env_file: ./.vuln.env
    environment:
      - METRICS_DIR=/app/metrics
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nodeexporter_collectors:/app/metrics
    logging:
      <<: *logging
  watchtower:
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: --interval 7200 vulnrelay
    logging:
      <<: *logging
  {% endif %}

volumes:
  backend-static:
  gunicorn-socket:
  nodeexporter_collectors:
